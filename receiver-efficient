#!/usr/bin/env sage

from sage.all import *
print("Receiver efficient scheme by Oblivious Transfer using Public Key Encryption")

F = Zmod(37)
E = EllipticCurve(F, [2, 3])
# E = EllipticCurve(GF(389), [2, 3])

G = E.gen(0)  # Generator point of the curve
n = 350  

#An array here with random integers of size n indicating x1, x2..xn location coordinates.
#Random number corresponding to each index represents data in that location
array_length = 300
lower_bound = 1
upper_bound = 1000
location_coord = [randint(lower_bound, upper_bound) for _ in range(array_length)]
print("Random Array:", location_coord)

#Query requested by the user
receiver_requested_index = randint(0, array_length -1)
print("Receiver requested index:", receiver_requested_index)

expected_M = location_coord[receiver_requested_index] * G

# Sender (LBS Server) Keys
x = ZZ.random_element(1, n)  # Alice's private key
#ZZ stands for ZahlenZirkel(ring of integers), it is used to generate a random point in the given range
Y = x * G  # Alice's public key (a point on the curve)

print("Alice's secret key a =", x)
print("Alice's public key A =", Y)

k = ZZ.random_element(1, n)

# List to store all the cipher texts corresponding to each message at indexes from  0 to n of location coordinates
encrypted_data = []

# Traversing and encrypting data at each index of location coordinate
for i, M in enumerate(location_coord):
    B = k * G  # Public part of the encryption
    C = M * G + k * Y  # Encrypted message
    encrypted_data.append((B, C))

# Rerandomization of data at the receiver end
k_user = ZZ.random_element(1, n)
R = randint(0,n-1)
R_point = R * G
D = k_user * G
E = R_point + k_user*Y

C1 = encrypted_data[receiver_requested_index][0] + D
C2 = encrypted_data[receiver_requested_index][1] + E

#Decryption
M_with_R = C2 - x * C1

#Retrieval of queried data
M_decrypted =  M_with_R - R_point
print("Decrypted message point M_decrypted =", M_decrypted)

# Verify decryption
assert M_decrypted == expected_M, "Decryption failed!"
print("Decryption verified!")



